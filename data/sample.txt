1 概要（General）


1.1 C++とは

本書ではC++11のコア言語を解説する。 
C++は、1998年に最初のC++の標準規格が正式に制定された。これをC++98と呼ぶ。C++の標準規格は、2003年にマイナーアップデートされた。これをC++03と呼ぶ。C++03では、文面の記述の誤りや矛盾点を修正し、僅かな新機能を追加した。そして、2011年に、始めてのメジャーアップデートとなる大幅な変更を含んだC++11規格が制定された。C++11では、多くのコア言語機能やライブラリが追加された。また、文面の記述も大幅に見なおされた。 
将来に目を向けると、2014年には、再びマイナーアップデートであるC++14の正式発行が予定されている。次のメジャーアップデートは、非公式にC++1yと呼ばれているが、2017年を予定している。 

1.2 用語（Definitions）

argument
1.2.1 実引数（argument）と、 仮引数（parameter）

argument
仮引数（parameter）
argument


仮引数（parameter）

引数には、ふたつの種類がある。実引数とは、関数やマクロ、throw文、テンプレートに、実際に渡す引数のことをいう。仮引数とは、関数宣言や関数の定義、例外ハンドラーのcatch句、マクロ、テンプレート仮引数のことをいう。たとえば、関数の場合、 // xは仮引数
void f( int x ) ;

int main()
{
// 0は実引数
    f(0) ;
// argは実引数
    int arg = 0 ;
    f( arg ) ;
}

このように、関数の宣言や定義などの引数を、仮引数といい、関数の呼び出しの際に指定する引数を、実引数という。仮引数と実引数は、厳密に区別される。 

1.2.2 静的な型（static type）と、動的な型（dynamic type）

静的な型とは、実行しなくても、その意味が分かる型のことである。動的な型は、実行しなければ、その意味が決定出来ない型のことである。 

1.2.3 シグネチャー（signature）

シグネチャーとは、ある関数に対する、その関数の名前、引数のリストの型、戻り値の型、テンプレート仮引数のことである。また、メンバー関数の場合は、そのクラスや、CV修飾、リファレンス修飾も含まれる。また、その関数の属する名前空間も含まれる。シグネチャーは、その関数を特定するために用いられる。 

1.2.4 ill-formedプログラムと、well-formedプログラム

well-formedプログラムとは、文法上正しいプログラムである。ill-formedプログラムとは、well-formedではないプログラム、すなわち、文法上、間違ったプログラムである。多くの実装では、ill-formedプログラムは、コンパイルエラーとなる。 

1.2.5 実装可能な機能（conditionally-supported）

実装可能な機能とは、規格上、実装してなくてもよい機能や動作のことである。 

1.2.6 実装定義の動作（implementation-defined behavior）

実装定義の動作とは、well-formedではあるが、その意味が、実装によって変わるということである。 
